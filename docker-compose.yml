# docker-compose.yml

version: "3.9"

services:
  db:
    image: postgres:15.1-alpine
    container_name: postgres
    restart: on-failure
    environment:
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    ports:
     - "${POSTGRES_PORT}:${POSTGRES_PORT}"
#    healthcheck:
#       test: [ "CMD-SHELL", "pg_isready", "-d", "${POSTGRES_DB}" ]
#       interval: 5s
#       timeout: 10s
#       retries: 5
#       start_period: 10s
#    volumes:
#      - ./data:/var/lib/postgresql/data

  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
#    healthcheck:
#      test: [ "CMD", "cache-cli", "ping" ]
#      interval: 5s
#      timeout: 10s
#      retries: 5

  rabbitmq:
    image: rabbitmq:3.10.7-alpine
    container_name: rabbitmq
    hostname: rabbit
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS}"
      RABBITMQ_DEFAULT_VHOST: "${RABBITMQ_DEFAULT_VHOST}"
    ports:
      - "${RABBITMQ_PORT}:${RABBITMQ_PORT}"
#      - "15672:15672"
#    healthcheck:
#      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
#      interval: 10s
#      timeout: 5s
#      retries: 5

  celery:
    container_name: celery
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
        - .env
    environment:
      POSTGRES_HOST: db
      REDIS_SERVER: redis
      RABBITMQ_SERVER: rabbit
    command: celery --app=app.src.task:app_celery worker --loglevel=INFO
    depends_on:
      - app
      - rabbitmq
    links:
      - app
    volumes:
      - ./admin:/srv/media

  celery-beat:
      container_name: celery_beat
      build:
        context: .
        dockerfile: Dockerfile
      env_file:
        - .env
      environment:
        RABBITMQ_SERVER: rabbit
      command: celery --app=app.src.task:app_celery beat --loglevel=INFO
      links:
        - celery
        - redis
      depends_on:
        - app
        - rabbitmq

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fastapi
    restart: on-failure
    env_file:
      - .env
    environment:
      POSTGRES_HOST: db
      REDIS_SERVER: redis
      RABBITMQ_SERVER: rabbitmq
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    entrypoint: uvicorn app.main:app --reload --workers 1 --host 0.0.0.0 --port 8000


networks:
  default:
      name: lan_fastapi
